
import pygad
import numpy as np
import pandas as pd
 
df  = pd.read_excel("C:\Users\user\Desktop\raw data 306.xlsx")
Q10  = np.array(df["Q10"])
Q11 = np.array(df["Q11"])
Q12 = np.array(df["Q12"])
Q13 = np.array(df["Q13"])
 
 
def LL(omega, theta):
     def VG(omega, theta, p, a, b, alpha=0.61, beta=0.69):
         if p == 1 or b == 0:
             return np.sign(a)* theta * (omega * np.abs(a)- np.exp(omega * a )+1) * p ** beta  / ( (p ** beta ) + (1-p) ** beta ) ** (1 / beta )
         else:
             return (
                 np.sign(a) * theta * (omega * np.abs(a)- np.exp(omega * a )+1) * p ** beta  / ( (p ** beta ) + (1-p) ** beta ) ** (1 / beta ) +
                  np.sign(b) * theta * (omega * np.abs(b)- np.exp(omega * b )+1) * p ** beta  / ( (p ** beta ) + (1-p) ** beta ) ** (1 / beta ) 
             )
 
     def cal_LL_by_Q(omega, theta, Q, p1, a, b, p2, c, d):
         VG1 = VG(omega, theta, p1, a, b)
         VG2 = VG(omega, theta, p2, c, d)
         h1 = (Q == 1).astype(float)
         h2 = (Q == 2).astype(float)
         _LL = (
             h1 * np.log(1 / (1 + np.exp(VG2 - VG1))) +
             h2 * np.log(1 / (1 + np.exp(VG1 - VG2)))
         )
         return _LL.sum()
     
     return (
         cal_LL_by_Q(omega, theta, Q10 ,  0.5, -2000, 0,    1, -1000, 0) +
        cal_LL_by_Q(omega, theta, Q11,  0.8, -  45, 0,    1, -  30, 0) +
        cal_LL_by_Q(omega, theta, Q12,  0.2, - 130, 0, 0.25, - 100, 0) +
        cal_LL_by_Q(omega, theta, Q13, 0.01, -6000, 0, 0.02, -3000, 0)
    )

def fitness_func(_omega_theta, _idx):
    l = LL(
        np.exp(_omega_theta[0]),                    # make omega \in (0, +\inf)
        np.exp(_omega_theta[1])+1                   # make theta \in (1, +\inf)
    )
    if l != l:                       # nan
        l = -10000000
    return l

 

fitness_function = fitness_func

num_generations = 100
num_parents_mating = 4

sol_per_pop = 50
num_genes = 2

init_range_low = -4
init_range_high = 0

parent_selection_type = "rws"
keep_parents = 1

crossover_type = "single_point"
crossover_probability = 0.8

mutation_type = "random"
mutation_probability = 0.01
mutation_percent_genes = 20

ga_instance = pygad.GA(
    num_generations=num_generations,
    num_parents_mating=num_parents_mating,
    fitness_func=fitness_function,
    sol_per_pop=sol_per_pop,
    num_genes=num_genes,
    init_range_low=init_range_low,
    init_range_high=init_range_high,
    parent_selection_type=parent_selection_type,
    keep_parents=keep_parents,
    crossover_type=crossover_type,
    crossover_probability=crossover_probability,
    mutation_type=mutation_type,
    mutation_probability=mutation_probability,
    mutation_percent_genes=mutation_percent_genes,
    # save_solutions=True
)

ga_instance.run()

#ga_instance.plot_fitness()

solution, solution_fitness, solution_idx = ga_instance.best_solution()
print("Best omega and theta : {omega}, {theta}".format(omega=np.exp(solution[0]), theta=np.exp(solution[1])+1))
# print("Fitness value of the best solution = {solution_fitness}".format(solution_fitness=solution_fitness))
